DROP TABLE IF EXISTS BUILDSHELVES;
CREATE TABLE BUILDSHELVES AS
	WITH A AS (
		SELECT 
			WORK_ID,
			TAG_NAME,
			CAST(MAX(COUNT) AS BIGINT) AS COUNTER
		FROM ENGINE_API_SHELVES
		WHERE TAG_NAME NOT IN ('to-read', 
							   'currently-reading', 
							   'owned', 
							   'books-i-own', 
							   'kindle', 
							   'default',
							   'library',
							   'to-buy',
							   'owned-books',
							   'my-books',
							   'i-own',
							   'e-book',
							   'maybe')
		GROUP BY WORK_ID, TAG_NAME
	),
	B AS (
		SELECT
			TAG_NAME,
			COUNT(DISTINCT WORK_ID) AS TAG_NUM_WORK,
			SUM(COUNTER) AS TAG_TOTAL_COUNT,
			SQRT(SUM(COUNTER * COUNTER)) AS TAG_TOTAL_COUNT_NORM
		FROM A
		GROUP BY TAG_NAME
	),
	C0 AS (
		SELECT DISTINCT TAG_NAME
		FROM A
	),
	C AS (
		SELECT 
			TAG_NAME,
			ROW_NUMBER() OVER(ORDER BY TAG_NAME) AS TAG_ID
		FROM C0
	),
	D AS (
		SELECT 
			WORK_ID,
			SUM(COUNTER) AS WORK_TOTAL_COUNT,
			SQRT(SUM(COUNTER * COUNTER)) AS WORK_TOTAL_COUNT_NORM
		FROM A
		GROUP BY WORK_ID
	)
	SELECT 
		WORK_ID,
        TAG_NAME,
		ROW_NUMBER() OVER(PARTITION BY WORK_ID ORDER BY COUNTER DESC) AS RANKER,
		CAST(TAG_ID AS INT) AS TAG_ID,
		CAST(COUNTER AS INT) AS COUNTER,
		CAST(TAG_TOTAL_COUNT AS INT) AS TAG_TOTAL_COUNT,
		TAG_TOTAL_COUNT_NORM,
		CAST(TAG_NUM_WORK AS INT) AS TAG_NUM_WORK,
		CAST(WORK_TOTAL_COUNT AS INT) AS WORK_TOTAL_COUNT,
		WORK_TOTAL_COUNT_NORM
	FROM A
	LEFT JOIN B
	USING(TAG_NAME)
	LEFT JOIN C
	USING(TAG_NAME)
	LEFT JOIN D
	USING(WORK_ID);
	
CREATE INDEX BUILDSHELVES_WORK
ON BUILDSHELVES (WORK_ID);

CREATE INDEX BUILDSHELVES_TAG
ON BUILDSHELVES (TAG_ID);


SELECT DISTINCT TAG_NAME, TAG_TOTAL_COUNT, TAG_ID
FROM BUILDSHELVES
ORDER BY TAG_TOTAL_COUNT DESC
LIMIT 100;